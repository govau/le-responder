// Code generated by go-bindata.
// sources:
// data/add.html
// data/index.html
// data/source.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAddHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xcd\x6a\x84\x30\x10\xbe\xf7\x29\x86\x79\x80\x0d\x74\x0f\x85\x12\xbd\x14\x4a\x6f\x2d\x6c\x5f\x20\x9b\x8c\x26\xa0\x89\x98\x49\xdb\xad\xf8\xee\x45\xb3\xff\xeb\x52\x4f\x33\xfa\xfd\x8c\x1f\x9f\xb4\xdc\x36\xe5\x03\x00\x80\xb4\xa4\x4c\x1e\xe7\x95\x1d\x37\x54\xbe\xf4\xa4\x98\xc0\xd3\x37\x68\xea\xd9\x55\x4e\x2b\x26\x29\xf2\xd7\x4c\x14\x27\xa6\xdc\x06\xb3\x3b\x13\xb1\xeb\xbb\x0a\x76\x7d\x86\xab\x42\xdf\x42\x4b\x6c\x83\x29\xf0\xe3\x7d\xf3\x89\xa0\x34\xbb\xe0\x0b\x14\xa9\x33\x8a\x09\x4f\xe8\x99\xe1\x7c\x97\x18\x78\xd7\x51\x81\xd6\x19\x43\x1e\xc1\xab\x96\x0a\xcc\x44\x84\x2f\xd5\x24\x2a\x50\xcf\xfe\x08\xe2\x4a\xa0\x2b\xdf\x42\x64\xe0\x00\x5b\xaa\x9d\x87\x56\x79\x55\x3b\x5f\x3f\x4b\xd1\xdd\x40\x2f\xec\x98\x7e\xf8\x60\x66\x43\xe4\xa3\x15\x42\x74\xbf\x54\xe0\xd3\x23\x82\x4a\x1c\xaa\xa0\x53\x2c\xf0\x38\x4e\x47\x2c\xa9\x6f\x42\xea\x35\x2d\x1a\x5f\xec\xf3\xbb\x48\x0d\x69\xde\xdb\xc7\x99\x89\xb7\xb0\xe9\x19\x06\xe8\x95\xaf\x09\x56\x19\x16\x61\x1c\x17\x81\xb3\x6e\xe8\xa6\xd8\xca\x61\x80\x15\x8c\xa3\x14\xfb\xfd\x9e\x32\x79\xb3\x24\x27\x45\xbe\xef\xea\x47\xfe\x8b\x34\xa6\x6d\xeb\x4e\x41\x6e\xf6\xeb\x42\x5c\xd3\x7d\x3a\xf6\xd5\xab\xa3\xe6\xe2\x02\x29\xa6\x12\x1d\x2a\x99\x7b\x28\x45\xee\xf7\x5f\x00\x00\x00\xff\xff\x9f\x64\x44\xd5\xe7\x02\x00\x00")

func dataAddHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataAddHtml,
		"data/add.html",
	)
}

func dataAddHtml() (*asset, error) {
	bytes, err := dataAddHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/add.html", size: 743, mode: os.FileMode(420), modTime: time.Unix(1541473444, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x49\x8f\xdb\x36\x14\xbe\xf7\x57\xbc\xb2\x07\xdb\x80\x61\x75\x3a\x87\x04\x1e\x49\xc5\xd4\x49\x90\x01\xba\x04\x51\x73\x2a\x7a\xa0\xc5\x27\x89\x0d\x45\x0a\xd4\x53\xa6\x86\xab\xff\x5e\x50\xd4\x78\x95\x5c\x77\x06\xd1\x45\xcb\x5b\xbf\xef\x2d\x62\x58\x50\xa9\xe2\x6f\x00\x00\xc2\x02\xb9\xf0\x8f\xdd\x2b\x49\x52\x18\xaf\xd0\x12\x90\x31\x2a\x0c\xfc\x87\xbd\x42\x9d\x5a\x59\x11\xd0\xa6\xc2\x88\x11\xfe\x4d\xc1\x5f\xfc\x0b\xf7\x5f\xd9\x5e\xcf\x5d\x59\xa3\x53\x92\x46\x83\x30\x0f\xf4\x69\xca\x53\x9a\x43\xc5\xa9\x98\xc1\xf6\x48\xcf\x5d\xc2\xa4\x4d\x89\x9a\x16\x39\xd2\x5b\x85\xee\xf1\xa7\xcd\x83\x98\x32\x67\xc0\x66\x8b\x2f\x5c\x35\x08\x51\x67\x7f\x77\xbd\x35\xef\x12\x38\xb0\xe7\x29\xfd\x0f\xf3\x8c\xcd\x16\x75\xb3\x2e\x25\x4d\x67\xe7\x66\x16\xa9\xb1\x1a\x32\xae\x6a\x3c\x96\xb6\xe3\x3c\x24\xcf\xe4\x21\x79\x19\x11\xc9\x0b\x99\x48\x5e\x4e\x45\x18\xf8\x2e\xe9\x1b\x2f\xd8\x77\x5e\xb8\x36\x62\x73\xd0\x63\x55\xfc\x5e\xc2\x76\x0b\x8b\xa6\x46\xbb\x78\x5b\x72\xa9\xee\x85\xb0\x58\xd7\xd0\xb6\x73\xd8\x98\x06\xb8\x45\x50\x26\xcf\x51\x80\xd4\xdf\xc2\x1f\x10\x72\x28\x2c\x66\x11\x0b\x94\xc9\x4d\x43\x2c\xfe\xb9\xbb\xc3\x94\x0a\x59\xcf\xc2\x80\xc7\xf0\xcf\x99\xd6\x8f\x69\x16\xdd\xec\x54\x57\xef\x3a\xb5\x3f\xc3\xa0\xda\x67\xb3\xdd\x82\xe5\x3a\x47\x58\x94\x58\xd7\x3c\x47\x97\xc4\x11\xc4\xb0\x82\x9a\x36\x0a\x23\x56\x71\x21\xa4\xce\x97\x37\x58\xde\xc1\xda\x58\x81\xb6\x7f\xe6\xe9\xe7\xdc\x9a\x46\x8b\x25\xd8\x7c\x3d\xfd\xe1\xf6\xf5\x1c\x6e\x5e\xdf\xce\xe1\xe6\xd5\xab\xd9\x1d\x8b\x1d\x5a\x68\xdb\xd3\xc8\xa8\xc5\x61\xb4\x30\x33\xb6\x04\x29\x22\x96\x31\x28\x91\x0a\x23\x22\xf6\xe1\xb7\xe4\x77\x06\xbe\xbe\x11\x0b\x9a\x4a\x70\xc2\x93\x51\x0c\xa5\xae\x1a\xea\x2c\xbb\x3e\xea\xe7\xb7\x90\x42\xa0\x66\xa0\x79\x89\x4f\x92\x60\xd4\xb2\x6f\xa1\x41\xdb\x27\xd9\x89\xb5\x83\x95\xd6\x36\x7b\x27\x51\x1d\x23\x09\x1c\x94\x78\x00\x59\x32\x0e\xad\x36\x8d\x4d\x2f\x40\x4b\x9e\x8f\x2d\xf9\xaa\xe0\xaa\x6e\xa3\xca\x4c\xa6\x9c\xb0\x86\x92\x6b\x9e\xa3\x58\x1e\x55\x3b\x24\xbe\x56\xd8\x77\x4d\xc4\xfc\xfd\x14\x2b\xd9\xf8\x6c\xf6\x42\x2a\xe2\x5f\x79\x89\x61\x40\xc5\xb0\xf4\x0d\xdf\xd4\xf0\x11\x4b\x2e\xb5\xd4\xf9\xb8\x5e\xd2\xf1\x3b\x2e\x5f\x15\x5c\x29\xd4\xf9\x05\x95\xfb\x8e\xaa\xfa\x5c\x21\x0c\x4e\x73\xdf\x0f\x56\x8a\x96\xce\xa6\x6a\x14\xaf\x17\x88\x78\x37\xcb\x05\x51\x55\x2f\x83\xc0\xd5\xc3\x11\x01\x6d\xeb\x07\xaa\x7f\x71\x43\x1d\x06\x24\x46\x5d\xb9\x54\x64\x06\x8a\x60\xe1\xa8\xda\x31\x05\xb7\xdf\x43\xdb\x3e\x0d\x77\x6a\x94\xb1\x4b\x8b\x82\xed\x27\xb3\x0b\x73\x6c\xe3\xe2\x5d\x88\xd5\x59\xac\x2c\x8a\xf7\xcd\xda\x35\xc5\xc2\x93\xee\xe2\x1c\x2c\xb1\xef\x18\x18\x9d\x2a\x99\x7e\x8e\x58\xbf\x5b\xfd\xcf\x63\xe2\x67\x60\x32\x9f\x38\x3f\x1f\x38\x15\xd0\xb6\x13\xb7\x41\x56\x05\xef\x2a\xe3\x17\xd8\xa5\x0c\x06\x05\x7d\x45\x64\x76\x9c\xdd\xae\xe4\x43\xe5\x39\x72\x5c\x59\x3c\xc3\xb6\xb3\x5e\x3c\xe8\x9a\x6c\xe3\x9b\xc3\xef\x39\x8b\xe3\x89\xb8\xeb\xbf\xd9\xf8\x34\x9d\xa4\xa6\xac\x14\xd2\x20\x1f\xbd\xc8\x33\x72\x09\xf3\xc9\x92\x3d\x42\xf5\x22\x22\x93\xc2\x3c\xbe\x41\x97\x04\xb4\xed\x55\x78\x04\x8e\xa0\xf1\x6e\x3c\x96\xcb\x29\x9f\xc4\xff\x88\x1a\x1f\xaf\x0d\xcf\x1b\x32\x03\xc1\x3b\x1f\xcf\x88\xfd\x0b\xd7\x0d\x57\xd7\x06\x2f\x3b\xed\x81\xf0\xde\xcd\x35\xf1\x87\xcb\x35\xb8\x7a\x4e\xff\xac\x41\xb7\x7e\xf7\x6a\x87\x27\x0a\x2e\x04\x8b\xef\x85\xf0\x29\x00\x40\x7f\x82\xf1\xc7\x96\x30\xf0\xc7\xe9\x7f\x03\x00\x00\xff\xff\xf4\x0b\x8d\xbe\x56\x0b\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 2902, mode: os.FileMode(420), modTime: time.Unix(1551132609, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataSourceHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x6a\xc3\x30\x0c\xbd\xef\x2b\x84\x3f\xa0\x3a\xf4\x36\x9c\x5c\x06\xbb\x6e\xd0\xfd\x80\x1b\xab\xb3\x21\xb1\x4d\xac\x0c\x4a\xf0\xbf\x0f\xdb\xd9\xda\x34\x19\x2c\xa7\x48\x7e\xef\xe9\x49\x3c\x69\x78\xe8\xdb\x27\x00\x00\x69\x48\xe9\xfa\x5b\x4a\xb6\xdc\x53\xfb\x62\x94\xfb\x24\x88\x7e\x1a\x3b\x92\x58\x9b\x15\x8f\x37\x82\x3c\x7b\x7d\xbd\xe3\x9a\xe3\x23\xd1\x1c\xef\x9e\x2f\x7e\x1c\x60\x20\x36\x5e\x37\xe2\xfd\xed\xf4\x21\x40\x75\x6c\xbd\x6b\x04\x4e\x41\x2b\x26\x71\x43\x17\x86\x75\x61\x62\xe0\x6b\xa0\x46\x18\xab\x35\x39\x01\x4e\x0d\xd4\x88\x4a\x14\xf0\xa5\xfa\x89\x1a\x51\xe7\x09\xc0\x7f\x0b\x18\x1f\xf9\x97\x3e\xcf\x70\xc8\x0d\x48\x69\xab\x11\xd6\x4b\x01\xfb\x67\x89\x61\x03\x5a\xd5\xa5\x17\xa9\xa7\x8e\x97\x79\x8b\xc3\x2d\x2c\x7f\xf3\x0c\x63\x19\x71\xa8\xb0\x08\x29\xed\x02\x8b\xae\x0f\x79\xf7\x36\x9b\x86\x94\x24\x2e\xf5\x5f\xca\xe4\xf4\x9e\x9c\xc4\xea\xef\x61\x91\x9d\xcd\x56\x57\x8c\xd3\x79\xb0\xb7\xcb\x9d\x96\x12\xdb\x0d\x33\xfb\xeb\xe2\x78\x79\xb5\xd4\xaf\x1c\x48\xcc\x49\xf8\x89\x53\xcd\x90\xc4\x1a\xc9\xef\x00\x00\x00\xff\xff\x3b\x09\x10\x5f\x9a\x02\x00\x00")

func dataSourceHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataSourceHtml,
		"data/source.html",
	)
}

func dataSourceHtml() (*asset, error) {
	bytes, err := dataSourceHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/source.html", size: 666, mode: os.FileMode(420), modTime: time.Unix(1541473444, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/add.html": dataAddHtml,
	"data/index.html": dataIndexHtml,
	"data/source.html": dataSourceHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"add.html": &bintree{dataAddHtml, map[string]*bintree{}},
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
		"source.html": &bintree{dataSourceHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

