# Pull le-responder
- type: replace
  path: /releases/-
  value:
    name: le-responder
    version: "1.4.0"
    sha1: "b2e23288270cc2ca644beb201171939ef291a98f"
    url: "https://github.com/govau/le-responder/releases/download/v1.4.0/le-responder-1.4.0.tgz"

# Pull in latest version of CredHub for our instance
- type: replace
  path: /releases/-
  value:
    name: credhub
    version: "1.8.3"
    url: "https://bosh.io/d/github.com/pivotal-cf/credhub-release?v=1.8.3"
    sha1: "232cf1001e685371fe74c2630fa8115ebaf1f2a7"

# Create MySQL database for CredHub
# Create MySQL database for CredHub
- type: replace
  path: /instance_groups/name=database/jobs/name=mysql/properties/cf_mysql/mysql/seeded_databases/-
  value:
    name: tlscredhub
    username: tlscredhub
    password: ((tlscredhub_database_password))

- type: replace
  path: /variables/-
  value:
    name: tlscredhub_database_password
    type: password

# ACME Key
- type: replace
  path: /variables/-
  value:
    name: acme_key
    type: rsa

- type: replace
  path: /variables/-
  value:
    name: acme_staging_key
    type: rsa

# Instantiate CredHub instance, do it just before the router
- type: replace
  path: /instance_groups/name=router:before
  value:
    name: tls-credhub
    instances: 1
    vm_type: minimal
    azs: [z1]
    stemcell: default
    networks:
    - name: default
    jobs:
    - name: consul_agent
      release: consul
      consumes:
        consul_common: {from: consul_common_link}
        consul_server: nil
        consul_client: {from: consul_client_link}
      properties:
        consul:
          agent:
            services:
              credhub:
                name: tls-credhub
                check: {} # TODO, healthcheck
              le-responder:
                name: le-responder
                check: {} # TODO, healthcheck
    - name: le-responder
      release: le-responder
      properties:
        config:
          sources:
            self-signed:
              type: self-signed
            le-prod:
              type: acme
              private_key: ((acme_key.private_key))
              url: https://acme-v01.api.letsencrypt.org/directory
              email: ((certs_le_contact_email))
            le-staging:
              type: acme
              private_key: ((acme_staging_key.private_key))
              url: https://acme-staging.api.letsencrypt.org/directory
              email: ((certs_le_contact_email))

          daemon:
            bootstrap:
              source: self-signed
            days_before: 32 # bump a little higher than 30 as many checks hardcode 30.
            period: 86400

          data:
            credhub:
              uaa_url: https://uaa.service.cf.internal:8443
              uaa_ca_certificates:
              - ((uaa_ca.certificate))
              client_id: le_responder
              client_secret: ((le_responder_client_secret))
              credhub_url: https://tls-credhub.service.cf.internal:8844
              credhub_ca_certificates:
              - ((tls_credhub_ca.certificate))

          output:
            s3:
            - bucket: ((leresponder_output_bucket))
              region: ap-southeast-2
              object: le-responder/current-certificates.tgz
              access_key: ((leresponder_output_iam_key))
              access_secret: ((leresponder_output_iam_secret))

          servers:
            acme_responder:
              port: 80

            admin_ui:
              port: 443
              uaa:
                client_id: le-responder-user-client
                client_secret: ((le-responder-user-client-secret))
                internal_url: https://uaa.service.cf.internal:8443
                external_url: https://uaa.((system_domain))
                ca_certs:
                - ((uaa_ca.certificate))
              csrf_key: ((le-responder-csrf-key))
              external_url: ((leresponder_external_url))
              allowed_users:
              - admin
    - name: credhub
      release: credhub
      properties:
        credhub:
          port: 8844
          tls: ((tls_credhub_tls_cert))
          authentication:
            uaa:
              url: https://uaa.service.cf.internal:8443
              verification_key: ((uaa_jwt_signing_key.public_key))
              ca_certs:
              - ((uaa_ca.certificate))
          authorization:
            acls:
              enabled: true
          data_storage:
            type: mysql
            username: tlscredhub
            password: ((tlscredhub_database_password))
            host: sql-db.service.cf.internal
            port: 3306
            database: tlscredhub
            require_tls: false # cf default MySQL doesn't appear to be configured for TLS
          encryption:
            keys:
            - provider_name: int
              encryption_password: ((credhub_encryption_password))
              active: true
            providers:
            - name: int
              type: internal

- type: replace
  path: /variables/-
  value:
    name: credhub_encryption_password
    type: password
    options:
      length: 40

- type: replace
  path: /variables/-
  value:
    name: le-responder-csrf-key
    type: password
    options:
      length: 40

- type: replace
  path: /variables/-
  value:
    name: tls_credhub_ca
    type: certificate
    options:
      is_ca: true
      common_name: tls-credhub-ca.service.cf.internal

- type: replace
  path: /variables/-
  value:
    name: tls_credhub_tls_cert
    type: certificate
    options:
      ca: tls_credhub_ca
      common_name: tls-credhub.service.cf.internal

- type: replace
  path: /instance_groups/name=uaa/jobs/name=uaa/properties/uaa/clients/le-responder-user-client?
  value:
    scope: openid
    authorized-grant-types: authorization_code,refresh_token
    secret: ((le-responder-user-client-secret))
    access_token_validity: 3600
    redirect-uri: ((leresponder_external_url))/oauth2callback

- type: replace
  path: /variables/-
  value:
    name: le-responder-user-client-secret
    type: password
    options:
      length: 40

# Create UAA client for le_responder so that it can authenticate to our CredHub
- type: replace
  path: /instance_groups/name=uaa/jobs/name=uaa/properties/uaa/clients/le_responder?
  value:
    authorities: credhub.read,credhub.write
    authorized-grant-types: client_credentials
    secret: "((le_responder_client_secret))"

- type: replace
  path: /variables/-
  value:
    name: le_responder_client_secret
    type: password
    options:
      length: 40
